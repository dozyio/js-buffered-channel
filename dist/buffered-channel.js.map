{"version":3,"file":"buffered-channel.js","sources":["../src/buffered-channel.ts"],"sourcesContent":["// src/buffered-channel.ts\n\nexport default class BufferedChannel {\n  private readonly port: MessagePort\n  private readonly bufferSize: number\n  private readonly receiveQueue: any[] = []\n  private readonly receiveResolvers: Array<(result: IteratorResult<any>) => void> = []\n  private readonly sendQueue: Array<{ message: any, resolve: any, reject: any }> = []\n  private readonly sendResolvers: Array<() => void> = []\n  private inFlight: number = 0\n\n  constructor (port: MessagePort, bufferSize: number = 4) {\n    this.port = port\n    this.bufferSize = bufferSize\n\n    // Initialize the port listener\n    this.port.onmessage = (event) => {\n      // console.log(`BufferedChannel: Received message \"${event.data}\"`);\n\n      // Handle incoming messages\n      this.enqueueReceive(event.data)\n\n      // Handle the echo: resolve the first sendResolver\n      if (this.sendResolvers.length > 0) {\n        const resolve = this.sendResolvers.shift()\n        if (resolve !== undefined) {\n          resolve()\n          this.inFlight--\n        }\n      }\n\n      // Try to send next message from sendQueue\n      this.trySendQueued()\n    }\n\n    // Handle port closure\n    // this.port.onclose = () => {\n    //   // console.log('BufferedChannel: Port closed.');\n    //\n    //   // Reject all pending receive promises\n    //   this.receiveResolvers.forEach((resolve) =>\n    //     resolve({ value: undefined, done: true })\n    //   )\n    //   this.receiveResolvers = []\n    //\n    //   // Resolve all pending send promises\n    //   this.sendResolvers.forEach((resolve) => resolve())\n    //   this.sendResolvers = []\n    //\n    //   // Reject all queued sends\n    //   while (this.sendQueue.length > 0) {\n    //     const { reject } = this.sendQueue.shift()\n    //     reject(new Error('Port closed'))\n    //   }\n    // }\n  }\n\n  // Internal method to enqueue received messages\n  private enqueueReceive (message: any): void {\n    if (this.receiveResolvers.length > 0) {\n      const resolve = this.receiveResolvers.shift()\n      if (resolve !== undefined) {\n        resolve({ value: message, done: false })\n      }\n    } else {\n      this.receiveQueue.push(message)\n    }\n  }\n\n  // Async iterator for receiving messages\n  get receive (): AsyncIterableIterator<any> {\n    const self = this\n    return {\n      [Symbol.asyncIterator] () {\n        return this\n      },\n      async next () {\n        if (self.receiveQueue.length > 0) {\n          const value = self.receiveQueue.shift()\n          return Promise.resolve({ value, done: false })\n        }\n        return new Promise<IteratorResult<any>>((resolve) => {\n          self.receiveResolvers.push(resolve)\n        })\n      }\n    }\n  }\n\n  // Method to send messages with backpressure\n  async send (message: any): Promise<void> {\n    if (this.sendResolvers.length < this.bufferSize) {\n      this.inFlight++\n      // console.log(`BufferedChannel: Sending message \"${message}\" immediately. In-flight: ${this.sendResolvers.length + 1}, Buffer size: ${this.bufferSize}`);\n\n      // Send the message immediately\n      this.port.postMessage(message)\n\n      // Create a Promise that will resolve when echo is received\n      return new Promise<void>((resolve, _reject) => {\n        this.sendResolvers.push(resolve)\n      })\n    } else {\n      // console.log(`BufferedChannel: Buffer full. Enqueuing message \"${message}\". Queue length: ${this.sendQueue.length + 1}`);\n\n      // Buffer is full, enqueue the message\n      return new Promise<void>((resolve, reject) => {\n        this.sendQueue.push({ message, resolve, reject })\n      })\n    }\n  }\n\n  // Method to handle sending queued messages when space is available\n  private trySendQueued (): void {\n    while (\n      this.sendResolvers.length < this.bufferSize &&\n      this.sendQueue.length > 0\n    ) {\n      const msg = this.sendQueue.shift()\n      if (msg === undefined) {\n        return\n      }\n\n      try {\n        this.port.postMessage(msg.message)\n        this.inFlight++\n        // console.log(`BufferedChannel: Sent enqueued message \"${message}\". In-flight: ${this.sendResolvers.length + 1}`);\n        this.sendResolvers.push(msg.resolve)\n      } catch (error) {\n        // console.error(`BufferedChannel: Error sending message \"${message}\":`, error);\n        msg.reject(error)\n      }\n    }\n  }\n\n  // Initiate flow control by attempting to send any queued messages\n  initSendFlow (): void {\n    this.trySendQueued()\n  }\n}\n"],"names":["BufferedChannel","port","bufferSize","__publicField","event","resolve","message","self","value","_reject","reject","msg","error"],"mappings":";;;AAEA,MAAqBA,EAAgB;AAAA,EASnC,YAAaC,GAAmBC,IAAqB,GAAG;AARvC,IAAAC,EAAA;AACA,IAAAA,EAAA;AACA,IAAAA,EAAA,sBAAsB,CAAA;AACtB,IAAAA,EAAA,0BAAiE,CAAA;AACjE,IAAAA,EAAA,mBAAgE,CAAA;AAChE,IAAAA,EAAA,uBAAmC,CAAA;AAC5C,IAAAA,EAAA,kBAAmB;AAGzB,SAAK,OAAOF,GACZ,KAAK,aAAaC,GAGb,KAAA,KAAK,YAAY,CAACE,MAAU;AAO3B,UAHC,KAAA,eAAeA,EAAM,IAAI,GAG1B,KAAK,cAAc,SAAS,GAAG;AAC3B,cAAAC,IAAU,KAAK,cAAc,MAAM;AACzC,QAAIA,MAAY,WACNA,KACH,KAAA;AAAA,MAET;AAGA,WAAK,cAAc;AAAA,IAAA;AAAA,EAuBvB;AAAA;AAAA,EAGQ,eAAgBC,GAAoB;AACtC,QAAA,KAAK,iBAAiB,SAAS,GAAG;AAC9B,YAAAD,IAAU,KAAK,iBAAiB,MAAM;AAC5C,MAAIA,MAAY,UACdA,EAAQ,EAAE,OAAOC,GAAS,MAAM,GAAO,CAAA;AAAA,IACzC;AAEK,WAAA,aAAa,KAAKA,CAAO;AAAA,EAElC;AAAA;AAAA,EAGA,IAAI,UAAuC;AACzC,UAAMC,IAAO;AACN,WAAA;AAAA,MACL,CAAC,OAAO,aAAa,IAAK;AACjB,eAAA;AAAA,MACT;AAAA,MACA,MAAM,OAAQ;AACR,YAAAA,EAAK,aAAa,SAAS,GAAG;AAC1B,gBAAAC,IAAQD,EAAK,aAAa,MAAM;AACtC,iBAAO,QAAQ,QAAQ,EAAE,OAAAC,GAAO,MAAM,IAAO;AAAA,QAC/C;AACO,eAAA,IAAI,QAA6B,CAACH,MAAY;AAC9C,UAAAE,EAAA,iBAAiB,KAAKF,CAAO;AAAA,QAAA,CACnC;AAAA,MACH;AAAA,IAAA;AAAA,EAEJ;AAAA;AAAA,EAGA,MAAM,KAAMC,GAA6B;AACvC,WAAI,KAAK,cAAc,SAAS,KAAK,cAC9B,KAAA,YAIA,KAAA,KAAK,YAAYA,CAAO,GAGtB,IAAI,QAAc,CAACD,GAASI,MAAY;AACxC,WAAA,cAAc,KAAKJ,CAAO;AAAA,IAAA,CAChC,KAKM,IAAI,QAAc,CAACA,GAASK,MAAW;AAC5C,WAAK,UAAU,KAAK,EAAE,SAAAJ,GAAS,SAAAD,GAAS,QAAAK,GAAQ;AAAA,IAAA,CACjD;AAAA,EAEL;AAAA;AAAA,EAGQ,gBAAuB;AAE3B,WAAA,KAAK,cAAc,SAAS,KAAK,cACjC,KAAK,UAAU,SAAS,KACxB;AACM,YAAAC,IAAM,KAAK,UAAU,MAAM;AACjC,UAAIA,MAAQ;AACV;AAGE,UAAA;AACG,aAAA,KAAK,YAAYA,EAAI,OAAO,GAC5B,KAAA,YAEA,KAAA,cAAc,KAAKA,EAAI,OAAO;AAAA,eAC5BC,GAAO;AAEd,QAAAD,EAAI,OAAOC,CAAK;AAAA,MAClB;AAAA,IACF;AAAA,EACF;AAAA;AAAA,EAGA,eAAsB;AACpB,SAAK,cAAc;AAAA,EACrB;AACF;"}